<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>File类与IO流</title>
      <link href="/2024/04/17/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/"/>
      <url>/2024/04/17/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="File类与IO流"><a href="#File类与IO流" class="headerlink" title="File类与IO流"></a>File类与IO流</h1><p><strong>File类的理解</strong></p><p>File类位于java.io包下，File类的一个对象，对应与操作系统下的一个文件或一个文件目录（或文件夹）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String pathname)</span>;<span class="comment">//以pathname为路径创建File对象，可以是相对路径也可以是绝对路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String parent, String child)</span>;<span class="comment">//以parent为父路径，child为子路径创建File对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(File parent, String child)</span>;<span class="comment">//根据一个父File对象和子文件路径创造File对象</span></span><br></pre></td></tr></table></figure><p><strong>获取文件和目录的基本信息</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span><span class="comment">//获取名称</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span><span class="comment">//获取路径</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span><span class="comment">//获取绝对路径</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title function_">getAbsoluteFile</span><span class="params">()</span><span class="comment">//获取绝对路径表示的文件</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParent</span><span class="params">()</span><span class="comment">//获取上层文件目录路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">length</span><span class="params">()</span><span class="comment">//获取文件的字节数，目录不行</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lastModified</span><span class="params">()</span><span class="comment">//获取最后一次修改时间</span></span><br><span class="line"><span class="keyword">public</span> String[] list()<span class="comment">//返回一个String数组，表示该Fiel目录中的所有子文件或目录</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles()<span class="comment">//返回一个File数组，表示该File目录中所有的子文件或者目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">renameTo</span><span class="params">(File dest)</span><span class="comment">//把文件重命名为指定的文件路径</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>Windows平台使用\ 在Java字符串中需要用\表示一个,Linux平台使用&#x2F;作为路径分隔符</p><p><strong>判断功能的方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span> <span class="comment">//此File表示的文件或目录是否实际存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span><span class="comment">//此File表示的是否为目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span><span class="comment">//此File表示的是否为文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">()</span><span class="comment">//判断是否可读</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">()</span><span class="comment">//判断是否可写入</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHidden</span><span class="params">()</span><span class="comment">//判断是否隐藏</span></span><br></pre></td></tr></table></figure><p><strong>创建与删除功能</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span><span class="comment">//创建文件</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title function_">createTempFile</span><span class="params">()</span><span class="comment">//创建临时文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteOnExit</span><span class="params">()</span><span class="comment">//在JVM退出的时候自动删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span><span class="comment">//创建文件目录，如果存在或上层目录不存在，就不创建了</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span><span class="comment">//创建文件目录，如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span><span class="comment">//删除文件或者文件夹</span></span><br><span class="line">删除的注意事项：</span><br><span class="line"><span class="number">1.</span>Java中的删除不走回收站</span><br><span class="line"><span class="number">2.</span>删除一个文件目录，注意该文件目录内不能包含文件或者文件目录（干净的目录）</span><br></pre></td></tr></table></figure><p><strong>过滤函数</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] listFiles = file.list(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file, String name)</span>&#123;</span><br><span class="line"><span class="comment">//判断语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>File类中声明了以上各种功能，但是没有涉及到文件内容的读写操作，想要实现文件内容的读写，就需要使用IO流。File的对象，通常是作为IO流操作的文件的端点出现的。</p><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p><img src="/.io//Untitled.png" alt="Untitled"></p><p><strong>IO流</strong>分为输入流<strong>InputStream</strong>和输出流<strong>OutputStream</strong></p><p><strong>InputStream</strong></p><p>InputStream是Java标准库中提供的最基本的输入流，位于java.io这个包里面。InputStream不是一个接口，而是一个抽象类，是所有输入流的超类。</p><p>InputStream提供了read()的方法，用来读取文件的字节，并用返回字节表示的int值，如果读取完毕，就返回-1。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建一个FileInputStream对象:</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/readme.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> input.read(); <span class="comment">// 反复调用read()方法，直到返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n); <span class="comment">// 打印byte的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    input.close(); <span class="comment">// 关闭流</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InputStream和OutputStream都是通过close()方法来关闭流，释放对应的底层资源。</p><p>使用try-catch来保证释放流。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        input = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/readme.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = input.read()) != -<span class="number">1</span>) &#123; <span class="comment">// 利用while同时读取并判断</span></span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input != <span class="literal">null</span>) &#123; input.close(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>try ... finally</code>来编写上述代码会感觉比较复杂，更好的写法是利用Java 7引入的新的<code>try(resource)</code>的语法，只需要编写<code>try</code>语句，让编译器自动为我们关闭资源。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/readme.txt&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 编译器在此自动为我们写入finally并调用close()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在读取字符的时候单个读取效率很低，可以使用缓冲区一次性读取多个字节，提高效率。InputStream提供了连个重载的方法来支持读取多个字节。</p><ul><li>int read(byte[] b)</li><li>int read(byte[] b, int off, intr len) 指定byte[]数组的起点和最大填充数。</li></ul><p>定义byte[]数组作为read()方法的入参，byte数组的长度限定了read方法读取字节的最大长度。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ((bytesRead = input.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="comment">// 处理读取到的数据  </span></span><br><span class="line">                <span class="comment">// 例如，可以将其写入文件或输出到控制台  </span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>在测试的时候，不需要在本地真得建立一个txt，使用InputStream的子类的ByteArryInputStream来构造一个Stream来进行测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = &#123; <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">33</span> &#125;;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> readAsString(input);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readAsString</span><span class="params">(InputStream input)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((n = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.append((<span class="type">char</span>) n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OutputStream</strong></p><p>OutputStream是Java提供的最基本的输出流，与InputStream类似，它是所有输出流的超类，重要的方法是write(int i)，虽然传参是int类型，但是只会写入一个字节，即只写入int表示的最低8为的字节的部分。</p><p>OutputStream还提供了flush()方法，将缓冲区的内容真正的输出到目的地。</p><p>每次写入一个字节的方法非常麻烦，OutputStream提供了重载方法write(byte [])来实现多数据输出。避免磁盘已满，无权限写入等问题，类似的，我们使用try(resource)来保证OutputStream是否发生IO错误的时候都能够正确地关闭。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">try</span>(<span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;name:&quot;</span>))&#123;</span><br><span class="line">out.write(<span class="string">&quot;Hello&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时操作多个<code>AutoCloseable</code>资源时，在<code>try(resource) &#123; ... &#125;</code>语句中可以同时写出多个资源，用<code>;</code>隔开。例如，同时读写两个文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取input.txt，写入output.txt:</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">     <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    input.transferTo(output); <span class="comment">// transferTo的作用是?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transferTo等同于以下的循环操作，但是更为高效：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">// 假设使用1024字节的缓冲区  </span></span><br><span class="line"><span class="type">int</span> bytesRead;  </span><br><span class="line"><span class="keyword">while</span> ((bytesRead = input.read(buffer)) != -<span class="number">1</span>) &#123;  </span><br><span class="line">    output.write(buffer, <span class="number">0</span>, bytesRead);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的是</strong>，<code>transferTo</code> 方法可能无法传输所有的字节，即使源输入流中还有数据。这是因为 <code>transferTo</code> 方法可能在传输一定数量的字节后返回，或者在遇到 I&#x2F;O 错误时抛出异常。因此，如果你需要确保所有数据都被传输，你可能需要检查 <code>transferTo</code> 的返回值(-1)，并在必要时重复调用它，直到所有的数据都被传输。</p><p>同样的，我们也可以用用<code>FileOutputStream</code>可以从文件获取输出流，这是<code>OutputStream</code>常用的一个实现类。此外，<code>ByteArrayOutputStream</code>可以在内存中模拟一个<code>OutputStream</code>。</p><p>我们在开发过程中可能需要对流进行多种自定义操作，这样可以使用到<strong>Filter</strong>功能。</p><p>为了解决依赖继承导致子类数量失控的问题，JDK将InputStream分为提供数据基础和提供额外附加功能两大类</p><p><img src="/.io//Untitled%201.png" alt="Untitled"></p><p>这样，在我们使用不同功能的InputStream的时候，只需要在实例的时候包装就可以实现。无论我们包装多少次，得到的对象始终都是InputStream，直接引用就可以使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>();</span><br></pre></td></tr></table></figure><p>类似的，OutputStream也同样支持相同的操作。</p><p><img src="/.io//Untitled%202.png" alt="Untitled"></p><p>可以自定义Filter来实现需要的功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readMyTest</span><span class="params">(InputStream input)</span>  <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">CountInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountInputStream</span>(input))&#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>)n);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Total read &quot;</span> + inputStream.getBytesRead() + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    CountInputStream(InputStream in) &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBytesRead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//计算stream中a的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.read();</span><br><span class="line">        <span class="keyword">if</span> (n != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">97</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.read(b, off, len);</span><br><span class="line">        <span class="keyword">if</span> (n != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.count += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不同服务端中的项目位置是不同的，导致无法固定配置文件的路径，使用classPath来读取文件，避免不同环境下文件路径不一致的问题。例如把default.properties文件放在classpath中，就无需关心实际存放的路径。</p><p><strong>通过序列化与反序列化可以进行数据的传输</strong></p><p>序列化的本质是把对象变成二进制数组，也就是byte[]。</p><p>把一个Java对象变为<code>byte[]</code>数组，需要使用<code>ObjectOutputStream</code>。它负责把一个Java对象写入一个字节流：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(buffer)) &#123;</span><br><span class="line">            <span class="comment">// 写入int:</span></span><br><span class="line">            output.writeInt(<span class="number">12345</span>);</span><br><span class="line">            <span class="comment">// 写入String:</span></span><br><span class="line">            output.writeUTF(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">            <span class="comment">// 写入Object:</span></span><br><span class="line">            output.writeObject(Double.valueOf(<span class="number">123.456</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>ObjectOutputStream功能强大，既可以写入int，boolean等基本类型，也可以写入String(UTF-8)，还可以写入实现了Serializable接口的Object。</p><p>与ObjectOutputStream相反，ObjectOutputStream负责从一个字节流读取Java对象，也就是反序列化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(...)) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> input.readInt();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.readUTF();</span><br><span class="line">    <span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> (Double) input.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了能读取上诉类型之外，可以调用readObject()可以直接返回一个Object对象，再进行强转，该方法会抛出两个异常。</p><ul><li>ClassNotFoundException<ul><li>该情况常见与在不同终端上没有建立相同的对象，导致在接收终端无法找到对应的类。</li></ul></li><li>InvaildClassException<ul><li>这种情况常见于想序列化和反序列化中的字段类型冲突，导致class不兼容。</li></ul></li></ul><p>为了避免这种情况，Java序列化允许class定义一个特殊的serialVersionUID静态变量，用于标识Java类的序列化版本，由IDE自动生成。这样如果修改了字段，就会改变该值。</p><p><strong>实际上，Java本身提供的基于对象的序列化和反序列化机制既存在安全性问题，也存在兼容性问题。更好的序列化方法是通过JSON这样的通用数据结构来实现，只输出基本类型（包括String）的内容，而不存储任何与代码相关的信息</strong>。</p><h3 id="Reader-And-Writer"><a href="#Reader-And-Writer" class="headerlink" title="Reader And Writer"></a>Reader And Writer</h3><p><code>Reader</code>是Java的IO库提供的另一个输入流接口。和<code>InputStream</code>的区别是，<code>InputStream</code>是一个字节流，即以<code>byte</code>为单位读取，而<code>Reader</code>是一个字符流，即以<code>char</code>为单位读取。</p><p>也就是说，在提供read()的方法中，返回的是0~65535的int类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;out/readme.txt&quot;</span>, StandardCharsets.UTF_8))&#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>( (n = reader.read() )!= -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>)n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：FileReader带指定编码格式在Java8及以前的版本并不提供。</p><p>相对应Input流，<strong>Reader</strong>中也有对应的子类提供。</p><ul><li><p><code>CharArrayReader</code>可以在内存中模拟一个<code>Reader</code>，它的作用实际上是把一个<code>char[]</code>数组变成一个<code>Reader</code>，这和<code>ByteArrayInputStream</code>非常类似：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharArrayReader</span>(<span class="string">&quot;Hello&quot;</span>.toCharArray())) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>StringReader</code>可以直接把<code>String</code>作为数据源，它和<code>CharArrayReader</code>几乎一样。</p></li></ul><p>可以看出Reader与InputStream有着不小的关联，普通的<code>Reader</code>实际上是基于<code>InputStream</code>构造的，因为<code>Reader</code>需要从<code>InputStream</code>中读入字节流（<code>byte</code>），然后，根据编码设置，再转换为<code>char</code>就可以实现字符流。如果我们查看<code>FileReader</code>的源码，它在内部实际上持有一个<code>FileInputStream</code>。</p><p>这样，如果我们持有一个保存byte[]的InputStream，我们是否可以直接转为Reader类型。InputStreamReader就是Java提供的一个转换器，可以把任何InputStream转换为Reader</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/readme.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也可以看作是一种FileReader的实现，在FileReader的源码中，可以看到其实是实现了FileInputStream。</p><p><strong>Writer与Reader类似，这里就不再进行赘述</strong>。</p><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>从Java7开始，Java提供了这个工具类，极大的加快了工作速度。</p><p>Files提供的读写方法十分的方便：</p><ul><li><p>**<code>byte**[] data = Files.readAllBytes(Path.of(&quot;/path/to/file.txt&quot;));</code></p><p>  将文件的内容全部读取为byte[]</p></li><li><p><code>String content1 = Files.readString(Path.of(&quot;/path/to/file.txt&quot;));</code></p><p>  将文件内容全部读取为String，可以指定读取编码类型。</p></li><li><p>**<code>List**&lt;String&gt; lines = Files.readAllLines(Path.of(&quot;/path/to/file.txt&quot;));</code></p><p>  按行读取并返回每一行的内容</p></li><li><p><code>Files.write(Path.of(&quot;/path/to/file.txt&quot;), data);</code></p><p>  写入二进制文件</p></li><li><p><code>Files.writeString(Path.of(&quot;/path/to/file.txt&quot;), &quot;文本内容...&quot;, StandardCharsets.ISO_8859_1);</code></p><p>  根据编码类型写入文件</p></li><li><p><code>Files.write(Path.of(&quot;/path/to/file.txt&quot;), lines);</code></p><p>  按行写入文件</p></li></ul><p>此外，<code>Files</code>工具类还有<code>copy()</code>、<code>delete()</code>、<code>exists()</code>、<code>move()</code>等快捷方法操作文件和目录。</p><p><strong>注意</strong>：<code>Files</code>提供的读写方法，受内存限制，只能读写小文件，例如配置文件等，不可一次读入几个G的大文件。读写大型文件仍然要使用文件流，每次只读写一部分文件内容。</p><h3 id="BIO、NIO与AIO"><a href="#BIO、NIO与AIO" class="headerlink" title="BIO、NIO与AIO"></a><strong>BIO、NIO与AIO</strong></h3><p><img src="/.io//Untitled%203.png" alt="Untitled"></p><p><strong>Blocking I&#x2F;O</strong>：传统IO，同步阻塞，服务器实现模式为一个连接一个线程</p><p><img src="/.io//Untitled%204.png" alt="Untitled"></p><p>BIO方式适用于链接数目比较小而且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中。</p><p><strong>Java non-blocking IO</strong>，是指JDK提供的新的API。从1.4开始，提供了一系列改进的输入&#x2F;输出的新特性，被统称为NIO</p><p>NIO是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到链接有IO请求就进行处理。</p><p>NIO的数据在传输的时候是面向<strong>缓冲区Buffer</strong>的，必须从Buffer中读取或写入</p><p><img src="/.io//Untitled%205.png" alt="Untitled"></p><ul><li>每个Channel对应一个Buffer</li><li>Selector对应一个线程，一个线程对应多个Channel。</li><li>Selector会根据不同的事件，在各个通道上切换</li><li>Buffer是内存块，底层是数据</li></ul><p><strong>Asynchronous I&#x2F;O</strong>，AIO是异步不阻塞的I&#x2F;O。NIO就是reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>序列化就是把Java对象转换为二进制流，方便存储和传输。反序列化就是把二进制流恢复成对象。</p><p><strong>Serializable接口</strong></p><p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化的场景就会报错，所以建议创建JavaBean类都实现Serializable。</p><p><strong>serialVersionUID作用：</strong></p><p>起一个验证的作用，用来验证序列化对象和反序列化对象的ID是否一致。</p><p>对于不想序列化的变量，可以使用transient关键字修饰。</p><p><strong>transient</strong>：阻止实例中哪些用词关键字修饰的变量进行序列化。只能<strong>修饰变量</strong>。</p><p><strong>序列化的方式</strong></p><p><img src="/.io//Untitled%206.png" alt="Untitled"></p><ul><li>Java对象序列化：Java原生序列化方法即通过Java原生流I&#x2F;O Stream方法进行转化(上文)。</li><li>Json序列化：最常用的序列化方式，将对象转化为byte数组或者json串。</li><li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>API接口文档Swagger使用指南</title>
      <link href="/2024/04/17/API%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3Swagger%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2024/04/17/API%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3Swagger%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="API接口文档Swagger使用指南"><a href="#API接口文档Swagger使用指南" class="headerlink" title="API接口文档Swagger使用指南"></a>API接口文档Swagger使用指南</h1><p><em><strong>Swagger</strong></em>—一款致力于解决接口规范化、标准化、文档化的开源库，一款真正的开发神器。</p><p><em><strong>Swagger</strong></em>是一款RESTFUL接口的文档在线自动生成+功能测试功能软件。Swagger是一个规范和完整的框架。用于生成、描述、调用和可视化RESTful风格的Web服务。</p><ul><li>对于后端来说<ul><li>不用手写WiKi接口手拼大量参数</li><li>对代码侵入性低，使用全注解的方式</li><li>方法参数名修改、增加、减少参数都可以直接生效，无需手动维护</li><li>缺点：增加开发成本，写接口还要再写一套参数配置。</li></ul></li><li>对于前端来说<ul><li>后端只需要定义接口就会自动生成文档，接口的参数和功能一目了然。</li><li>联调方便</li></ul></li></ul><h3 id="搭建一个Swagger"><a href="#搭建一个Swagger" class="headerlink" title="搭建一个Swagger"></a>搭建一个Swagger</h3><ul><li><p>引入Swagger的依赖</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- swagger --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot整合swagger</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">productApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))  <span class="comment">//添加ApiOperiation注解的被扫描</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>().title(”swagger和springBoot整合“).description(”swagger的API文档<span class="string">&quot;)</span></span><br><span class="line"><span class="string">                .version(&quot;</span><span class="number">1.0</span><span class="string">&quot;).build();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在controller上使用swagger的注解</p></li></ul><p>调用Swagger</p><p><a href="http://localhost:8093/swagger-ui.html">http://localhost:8093/swagger-ui.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汇总</title>
      <link href="/2024/04/16/%E6%B1%87%E6%80%BB/"/>
      <url>/2024/04/16/%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><a href="https://hyw20010212.github.io/2024/04/17/File%E7%B1%BB%E4%B8%8EIO%E6%B5%81/">单例设计与main()的理解</a></p><p><a href="https://www.notion.so/JVM-API-d5060a3ae44143b2bcedbd4e92828014?pvs=21">JVM与注释\API文档 </a></p><p><a href="https://www.notion.so/Static-final-eb56c1e3045c4e628e7c8fad6b66a884?pvs=21">Static与final</a></p><p><a href="https://www.notion.so/interface-bb982ec267f04ca0a775c2888ba193ab?pvs=21">接口interface</a></p><p><a href="https://www.notion.so/190eb41eb44c4aafb527d7fd518d7cda?pvs=21">内部类</a></p><p><a href="https://www.notion.so/285ecb55361642f2b7461eedf4b20b38?pvs=21">小知识</a></p><p><a href="https://www.notion.so/bf18de630f1940a9a2d9326552b07a91?pvs=21">线程</a></p><p><a href="https://www.notion.so/API-7d6ae30439d44567922fdb20f9b3c201?pvs=21">常用类与基础API</a></p><p><a href="https://www.notion.so/File-IO-ffd098987fc940b08165bbe1afeae826?pvs=21">File类与IO流</a></p><p><a href="https://www.notion.so/14beb6f4e4274158940f02bc7e43704a?pvs=21">反射</a></p><p><a href="https://www.notion.so/4b5ab83e3d894ed5867501f032b2e56d?pvs=21">异步编程</a></p><p><a href="https://www.notion.so/d57eabc5f3134c4a9d4648af6b0b93b0?pvs=21">泛型</a></p><p><a href="https://www.notion.so/Lambda-b9b7b56096e34313921ea8b78b0269b8?pvs=21">Lambda表达式</a></p><p><a href="https://www.notion.so/39cab743232b4e818b34b092de978b41?pvs=21">代码块</a></p><p><a href="https://www.notion.so/API-Swagger-55adf4934a924b4b86ffffea24c675eb?pvs=21">API接口文档Swagger使用指南</a></p><p><a href="https://www.notion.so/edff3e9eeff442fe87a30c74a245e229?pvs=21">异常处理</a></p><p><a href="https://www.notion.so/Mybatis-Plus-166eb8ddf4b64a7c8563c006b5a9a9bf?pvs=21">Mybatis Plus</a></p><p><a href="https://www.notion.so/abstract-7ec07dfc0e1345f0b28eab2e00632f8f?pvs=21">抽象类与抽象方法 abstract</a></p><p><a href="https://www.notion.so/Annotation-5ae77cca62f74e0d97f4508a76bf1127?pvs=21">注解Annotation</a></p><p><a href="https://www.notion.so/8e2dbf089c7b47e7bae37d30c94dbd20?pvs=21">单元测试</a></p><p><a href="https://www.notion.so/JMM-3bf254ca6b2d45d0bdcab80f6f5e0e55?pvs=21">JMM</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
